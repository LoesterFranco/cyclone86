// ---------------------------------------------------------------------
// Текущий исполняемый микрокод
// ---------------------------------------------------------------------

parameter state_init        = 0;
parameter state_opcode      = 1;
parameter state_modrm16     = 2;
parameter state_modrm32     = 3;
parameter state_exec        = 4;
parameter state_imm         = 5;

// ---------------------------------------------------------------------
// Информация о текущем состоянии исполнения процессора инструкции
// ---------------------------------------------------------------------

reg        rd           = 0;    // Процессор читает данные
reg [3:0]  cstate       = 0;    // Микроадрес
reg [15:0] cstack       = 0;    // Возвраты из процедур микрокода

// Параметры инструкции
reg [8:0]  opcode       = 0;    // Сохраненный опкод
reg [2:0]  segment_id   = 0;    // Номер сегмента (для override)
reg        segment_of   = 0;    // =1 Сегмент находится в префиксе
reg        opsize       = 0;    // Размер операнда (16, 32/64)
reg        adsize       = 0;    // Размер адреса (16, 32/64)
reg        lock         = 0;    // Префикс LOCK:
reg [1:0]  rep          = 0;    // 0: NZ, Z; 1: Наличие REP
reg        fmodrm       = 0;    // =1 Есть байт modrm, прочесть его

// Работа с регистрами
reg [ 2:0] reg_id_a     = 0;    // Номер регистра A
reg [ 2:0] reg_id_b     = 0;    // Номер регистра B
reg [31:0] reg_o_a      = 0;    // Выходное значение регистра A
reg [31:0] reg_o_b      = 0;    // Выходное значение регистра B
reg [31:0] reg_i        = 0;    // Значение для записи в регистр A
reg        reg_w        = 0;    // Признак записи в регистр

// Работа с modrm
reg [ 1:0] op_bit       = 0;    // Битность: 0 (8 bit), 1 (16 bit), 2 (32 bit), 3 (64 bit)
reg        op_dir       = 0;    // =0 (r/m, reg) =1 (reg, r/m)
reg [ 2:0] modph        = 0;    // Фаза считывания modrm
reg [ 2:0] dispsize     = 0;    // Кол-во байт для чтения disp (0 - 1, 7 - 8)
reg [ 2:0] dispimm      = 0;    // Смещение
reg [ 7:0] modrm        = 0;    // Сохраненное значение modrm, sib
reg [ 7:0] sib          = 0;
reg [31:0] ea           = 0;    // Эффективный адрес
reg [15:0] segment      = 0;    // Текущий сегмент
reg [31:0] op1          = 0;    // Операнд 1
reg [31:0] op2          = 0;    // Операнд 2
reg        sela         = 0;    // =sel выбирает segment:ea

initial begin

    wr      = 0;
    o_data  = 0;

end
